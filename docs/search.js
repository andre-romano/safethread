window.pdocSearch = (function(){
/** elasticlunr - http://weixsong.github.io * Copyright (C) 2017 Oliver Nightingale * Copyright (C) 2017 Wei Song * MIT Licensed */!function(){function e(e){if(null===e||"object"!=typeof e)return e;var t=e.constructor();for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);return t}var t=function(e){var n=new t.Index;return n.pipeline.add(t.trimmer,t.stopWordFilter,t.stemmer),e&&e.call(n,n),n};t.version="0.9.5",lunr=t,t.utils={},t.utils.warn=function(e){return function(t){e.console&&console.warn&&console.warn(t)}}(this),t.utils.toString=function(e){return void 0===e||null===e?"":e.toString()},t.EventEmitter=function(){this.events={}},t.EventEmitter.prototype.addListener=function(){var e=Array.prototype.slice.call(arguments),t=e.pop(),n=e;if("function"!=typeof t)throw new TypeError("last argument must be a function");n.forEach(function(e){this.hasHandler(e)||(this.events[e]=[]),this.events[e].push(t)},this)},t.EventEmitter.prototype.removeListener=function(e,t){if(this.hasHandler(e)){var n=this.events[e].indexOf(t);-1!==n&&(this.events[e].splice(n,1),0==this.events[e].length&&delete this.events[e])}},t.EventEmitter.prototype.emit=function(e){if(this.hasHandler(e)){var t=Array.prototype.slice.call(arguments,1);this.events[e].forEach(function(e){e.apply(void 0,t)},this)}},t.EventEmitter.prototype.hasHandler=function(e){return e in this.events},t.tokenizer=function(e){if(!arguments.length||null===e||void 0===e)return[];if(Array.isArray(e)){var n=e.filter(function(e){return null===e||void 0===e?!1:!0});n=n.map(function(e){return t.utils.toString(e).toLowerCase()});var i=[];return n.forEach(function(e){var n=e.split(t.tokenizer.seperator);i=i.concat(n)},this),i}return e.toString().trim().toLowerCase().split(t.tokenizer.seperator)},t.tokenizer.defaultSeperator=/[\s\-]+/,t.tokenizer.seperator=t.tokenizer.defaultSeperator,t.tokenizer.setSeperator=function(e){null!==e&&void 0!==e&&"object"==typeof e&&(t.tokenizer.seperator=e)},t.tokenizer.resetSeperator=function(){t.tokenizer.seperator=t.tokenizer.defaultSeperator},t.tokenizer.getSeperator=function(){return t.tokenizer.seperator},t.Pipeline=function(){this._queue=[]},t.Pipeline.registeredFunctions={},t.Pipeline.registerFunction=function(e,n){n in t.Pipeline.registeredFunctions&&t.utils.warn("Overwriting existing registered function: "+n),e.label=n,t.Pipeline.registeredFunctions[n]=e},t.Pipeline.getRegisteredFunction=function(e){return e in t.Pipeline.registeredFunctions!=!0?null:t.Pipeline.registeredFunctions[e]},t.Pipeline.warnIfFunctionNotRegistered=function(e){var n=e.label&&e.label in this.registeredFunctions;n||t.utils.warn("Function is not registered with pipeline. This may cause problems when serialising the index.\n",e)},t.Pipeline.load=function(e){var n=new t.Pipeline;return e.forEach(function(e){var i=t.Pipeline.getRegisteredFunction(e);if(!i)throw new Error("Cannot load un-registered function: "+e);n.add(i)}),n},t.Pipeline.prototype.add=function(){var e=Array.prototype.slice.call(arguments);e.forEach(function(e){t.Pipeline.warnIfFunctionNotRegistered(e),this._queue.push(e)},this)},t.Pipeline.prototype.after=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i+1,0,n)},t.Pipeline.prototype.before=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i,0,n)},t.Pipeline.prototype.remove=function(e){var t=this._queue.indexOf(e);-1!==t&&this._queue.splice(t,1)},t.Pipeline.prototype.run=function(e){for(var t=[],n=e.length,i=this._queue.length,o=0;n>o;o++){for(var r=e[o],s=0;i>s&&(r=this._queue[s](r,o,e),void 0!==r&&null!==r);s++);void 0!==r&&null!==r&&t.push(r)}return t},t.Pipeline.prototype.reset=function(){this._queue=[]},t.Pipeline.prototype.get=function(){return this._queue},t.Pipeline.prototype.toJSON=function(){return this._queue.map(function(e){return t.Pipeline.warnIfFunctionNotRegistered(e),e.label})},t.Index=function(){this._fields=[],this._ref="id",this.pipeline=new t.Pipeline,this.documentStore=new t.DocumentStore,this.index={},this.eventEmitter=new t.EventEmitter,this._idfCache={},this.on("add","remove","update",function(){this._idfCache={}}.bind(this))},t.Index.prototype.on=function(){var e=Array.prototype.slice.call(arguments);return this.eventEmitter.addListener.apply(this.eventEmitter,e)},t.Index.prototype.off=function(e,t){return this.eventEmitter.removeListener(e,t)},t.Index.load=function(e){e.version!==t.version&&t.utils.warn("version mismatch: current "+t.version+" importing "+e.version);var n=new this;n._fields=e.fields,n._ref=e.ref,n.documentStore=t.DocumentStore.load(e.documentStore),n.pipeline=t.Pipeline.load(e.pipeline),n.index={};for(var i in e.index)n.index[i]=t.InvertedIndex.load(e.index[i]);return n},t.Index.prototype.addField=function(e){return this._fields.push(e),this.index[e]=new t.InvertedIndex,this},t.Index.prototype.setRef=function(e){return this._ref=e,this},t.Index.prototype.saveDocument=function(e){return this.documentStore=new t.DocumentStore(e),this},t.Index.prototype.addDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.addDoc(i,e),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));this.documentStore.addFieldLength(i,n,o.length);var r={};o.forEach(function(e){e in r?r[e]+=1:r[e]=1},this);for(var s in r){var u=r[s];u=Math.sqrt(u),this.index[n].addToken(s,{ref:i,tf:u})}},this),n&&this.eventEmitter.emit("add",e,this)}},t.Index.prototype.removeDocByRef=function(e){if(e&&this.documentStore.isDocStored()!==!1&&this.documentStore.hasDoc(e)){var t=this.documentStore.getDoc(e);this.removeDoc(t,!1)}},t.Index.prototype.removeDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.hasDoc(i)&&(this.documentStore.removeDoc(i),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));o.forEach(function(e){this.index[n].removeToken(e,i)},this)},this),n&&this.eventEmitter.emit("remove",e,this))}},t.Index.prototype.updateDoc=function(e,t){var t=void 0===t?!0:t;this.removeDocByRef(e[this._ref],!1),this.addDoc(e,!1),t&&this.eventEmitter.emit("update",e,this)},t.Index.prototype.idf=function(e,t){var n="@"+t+"/"+e;if(Object.prototype.hasOwnProperty.call(this._idfCache,n))return this._idfCache[n];var i=this.index[t].getDocFreq(e),o=1+Math.log(this.documentStore.length/(i+1));return this._idfCache[n]=o,o},t.Index.prototype.getFields=function(){return this._fields.slice()},t.Index.prototype.search=function(e,n){if(!e)return[];e="string"==typeof e?{any:e}:JSON.parse(JSON.stringify(e));var i=null;null!=n&&(i=JSON.stringify(n));for(var o=new t.Configuration(i,this.getFields()).get(),r={},s=Object.keys(e),u=0;u<s.length;u++){var a=s[u];r[a]=this.pipeline.run(t.tokenizer(e[a]))}var l={};for(var c in o){var d=r[c]||r.any;if(d){var f=this.fieldSearch(d,c,o),h=o[c].boost;for(var p in f)f[p]=f[p]*h;for(var p in f)p in l?l[p]+=f[p]:l[p]=f[p]}}var v,g=[];for(var p in l)v={ref:p,score:l[p]},this.documentStore.hasDoc(p)&&(v.doc=this.documentStore.getDoc(p)),g.push(v);return g.sort(function(e,t){return t.score-e.score}),g},t.Index.prototype.fieldSearch=function(e,t,n){var i=n[t].bool,o=n[t].expand,r=n[t].boost,s=null,u={};return 0!==r?(e.forEach(function(e){var n=[e];1==o&&(n=this.index[t].expandToken(e));var r={};n.forEach(function(n){var o=this.index[t].getDocs(n),a=this.idf(n,t);if(s&&"AND"==i){var l={};for(var c in s)c in o&&(l[c]=o[c]);o=l}n==e&&this.fieldSearchStats(u,n,o);for(var c in o){var d=this.index[t].getTermFrequency(n,c),f=this.documentStore.getFieldLength(c,t),h=1;0!=f&&(h=1/Math.sqrt(f));var p=1;n!=e&&(p=.15*(1-(n.length-e.length)/n.length));var v=d*a*h*p;c in r?r[c]+=v:r[c]=v}},this),s=this.mergeScores(s,r,i)},this),s=this.coordNorm(s,u,e.length)):void 0},t.Index.prototype.mergeScores=function(e,t,n){if(!e)return t;if("AND"==n){var i={};for(var o in t)o in e&&(i[o]=e[o]+t[o]);return i}for(var o in t)o in e?e[o]+=t[o]:e[o]=t[o];return e},t.Index.prototype.fieldSearchStats=function(e,t,n){for(var i in n)i in e?e[i].push(t):e[i]=[t]},t.Index.prototype.coordNorm=function(e,t,n){for(var i in e)if(i in t){var o=t[i].length;e[i]=e[i]*o/n}return e},t.Index.prototype.toJSON=function(){var e={};return this._fields.forEach(function(t){e[t]=this.index[t].toJSON()},this),{version:t.version,fields:this._fields,ref:this._ref,documentStore:this.documentStore.toJSON(),index:e,pipeline:this.pipeline.toJSON()}},t.Index.prototype.use=function(e){var t=Array.prototype.slice.call(arguments,1);t.unshift(this),e.apply(this,t)},t.DocumentStore=function(e){this._save=null===e||void 0===e?!0:e,this.docs={},this.docInfo={},this.length=0},t.DocumentStore.load=function(e){var t=new this;return t.length=e.length,t.docs=e.docs,t.docInfo=e.docInfo,t._save=e.save,t},t.DocumentStore.prototype.isDocStored=function(){return this._save},t.DocumentStore.prototype.addDoc=function(t,n){this.hasDoc(t)||this.length++,this.docs[t]=this._save===!0?e(n):null},t.DocumentStore.prototype.getDoc=function(e){return this.hasDoc(e)===!1?null:this.docs[e]},t.DocumentStore.prototype.hasDoc=function(e){return e in this.docs},t.DocumentStore.prototype.removeDoc=function(e){this.hasDoc(e)&&(delete this.docs[e],delete this.docInfo[e],this.length--)},t.DocumentStore.prototype.addFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&(this.docInfo[e]||(this.docInfo[e]={}),this.docInfo[e][t]=n)},t.DocumentStore.prototype.updateFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&this.addFieldLength(e,t,n)},t.DocumentStore.prototype.getFieldLength=function(e,t){return null===e||void 0===e?0:e in this.docs&&t in this.docInfo[e]?this.docInfo[e][t]:0},t.DocumentStore.prototype.toJSON=function(){return{docs:this.docs,docInfo:this.docInfo,length:this.length,save:this._save}},t.stemmer=function(){var e={ational:"ate",tional:"tion",enci:"ence",anci:"ance",izer:"ize",bli:"ble",alli:"al",entli:"ent",eli:"e",ousli:"ous",ization:"ize",ation:"ate",ator:"ate",alism:"al",iveness:"ive",fulness:"ful",ousness:"ous",aliti:"al",iviti:"ive",biliti:"ble",logi:"log"},t={icate:"ic",ative:"",alize:"al",iciti:"ic",ical:"ic",ful:"",ness:""},n="[^aeiou]",i="[aeiouy]",o=n+"[^aeiouy]*",r=i+"[aeiou]*",s="^("+o+")?"+r+o,u="^("+o+")?"+r+o+"("+r+")?$",a="^("+o+")?"+r+o+r+o,l="^("+o+")?"+i,c=new RegExp(s),d=new RegExp(a),f=new RegExp(u),h=new RegExp(l),p=/^(.+?)(ss|i)es$/,v=/^(.+?)([^s])s$/,g=/^(.+?)eed$/,m=/^(.+?)(ed|ing)$/,y=/.$/,S=/(at|bl|iz)$/,x=new RegExp("([^aeiouylsz])\\1$"),w=new RegExp("^"+o+i+"[^aeiouwxy]$"),I=/^(.+?[^aeiou])y$/,b=/^(.+?)(ational|tional|enci|anci|izer|bli|alli|entli|eli|ousli|ization|ation|ator|alism|iveness|fulness|ousness|aliti|iviti|biliti|logi)$/,E=/^(.+?)(icate|ative|alize|iciti|ical|ful|ness)$/,D=/^(.+?)(al|ance|ence|er|ic|able|ible|ant|ement|ment|ent|ou|ism|ate|iti|ous|ive|ize)$/,F=/^(.+?)(s|t)(ion)$/,_=/^(.+?)e$/,P=/ll$/,k=new RegExp("^"+o+i+"[^aeiouwxy]$"),z=function(n){var i,o,r,s,u,a,l;if(n.length<3)return n;if(r=n.substr(0,1),"y"==r&&(n=r.toUpperCase()+n.substr(1)),s=p,u=v,s.test(n)?n=n.replace(s,"$1$2"):u.test(n)&&(n=n.replace(u,"$1$2")),s=g,u=m,s.test(n)){var z=s.exec(n);s=c,s.test(z[1])&&(s=y,n=n.replace(s,""))}else if(u.test(n)){var z=u.exec(n);i=z[1],u=h,u.test(i)&&(n=i,u=S,a=x,l=w,u.test(n)?n+="e":a.test(n)?(s=y,n=n.replace(s,"")):l.test(n)&&(n+="e"))}if(s=I,s.test(n)){var z=s.exec(n);i=z[1],n=i+"i"}if(s=b,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+e[o])}if(s=E,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+t[o])}if(s=D,u=F,s.test(n)){var z=s.exec(n);i=z[1],s=d,s.test(i)&&(n=i)}else if(u.test(n)){var z=u.exec(n);i=z[1]+z[2],u=d,u.test(i)&&(n=i)}if(s=_,s.test(n)){var z=s.exec(n);i=z[1],s=d,u=f,a=k,(s.test(i)||u.test(i)&&!a.test(i))&&(n=i)}return s=P,u=d,s.test(n)&&u.test(n)&&(s=y,n=n.replace(s,"")),"y"==r&&(n=r.toLowerCase()+n.substr(1)),n};return z}(),t.Pipeline.registerFunction(t.stemmer,"stemmer"),t.stopWordFilter=function(e){return e&&t.stopWordFilter.stopWords[e]!==!0?e:void 0},t.clearStopWords=function(){t.stopWordFilter.stopWords={}},t.addStopWords=function(e){null!=e&&Array.isArray(e)!==!1&&e.forEach(function(e){t.stopWordFilter.stopWords[e]=!0},this)},t.resetStopWords=function(){t.stopWordFilter.stopWords=t.defaultStopWords},t.defaultStopWords={"":!0,a:!0,able:!0,about:!0,across:!0,after:!0,all:!0,almost:!0,also:!0,am:!0,among:!0,an:!0,and:!0,any:!0,are:!0,as:!0,at:!0,be:!0,because:!0,been:!0,but:!0,by:!0,can:!0,cannot:!0,could:!0,dear:!0,did:!0,"do":!0,does:!0,either:!0,"else":!0,ever:!0,every:!0,"for":!0,from:!0,get:!0,got:!0,had:!0,has:!0,have:!0,he:!0,her:!0,hers:!0,him:!0,his:!0,how:!0,however:!0,i:!0,"if":!0,"in":!0,into:!0,is:!0,it:!0,its:!0,just:!0,least:!0,let:!0,like:!0,likely:!0,may:!0,me:!0,might:!0,most:!0,must:!0,my:!0,neither:!0,no:!0,nor:!0,not:!0,of:!0,off:!0,often:!0,on:!0,only:!0,or:!0,other:!0,our:!0,own:!0,rather:!0,said:!0,say:!0,says:!0,she:!0,should:!0,since:!0,so:!0,some:!0,than:!0,that:!0,the:!0,their:!0,them:!0,then:!0,there:!0,these:!0,they:!0,"this":!0,tis:!0,to:!0,too:!0,twas:!0,us:!0,wants:!0,was:!0,we:!0,were:!0,what:!0,when:!0,where:!0,which:!0,"while":!0,who:!0,whom:!0,why:!0,will:!0,"with":!0,would:!0,yet:!0,you:!0,your:!0},t.stopWordFilter.stopWords=t.defaultStopWords,t.Pipeline.registerFunction(t.stopWordFilter,"stopWordFilter"),t.trimmer=function(e){if(null===e||void 0===e)throw new Error("token should not be undefined");return e.replace(/^\W+/,"").replace(/\W+$/,"")},t.Pipeline.registerFunction(t.trimmer,"trimmer"),t.InvertedIndex=function(){this.root={docs:{},df:0}},t.InvertedIndex.load=function(e){var t=new this;return t.root=e.root,t},t.InvertedIndex.prototype.addToken=function(e,t,n){for(var n=n||this.root,i=0;i<=e.length-1;){var o=e[i];o in n||(n[o]={docs:{},df:0}),i+=1,n=n[o]}var r=t.ref;n.docs[r]?n.docs[r]={tf:t.tf}:(n.docs[r]={tf:t.tf},n.df+=1)},t.InvertedIndex.prototype.hasToken=function(e){if(!e)return!1;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return!1;t=t[e[n]]}return!0},t.InvertedIndex.prototype.getNode=function(e){if(!e)return null;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return null;t=t[e[n]]}return t},t.InvertedIndex.prototype.getDocs=function(e){var t=this.getNode(e);return null==t?{}:t.docs},t.InvertedIndex.prototype.getTermFrequency=function(e,t){var n=this.getNode(e);return null==n?0:t in n.docs?n.docs[t].tf:0},t.InvertedIndex.prototype.getDocFreq=function(e){var t=this.getNode(e);return null==t?0:t.df},t.InvertedIndex.prototype.removeToken=function(e,t){if(e){var n=this.getNode(e);null!=n&&t in n.docs&&(delete n.docs[t],n.df-=1)}},t.InvertedIndex.prototype.expandToken=function(e,t,n){if(null==e||""==e)return[];var t=t||[];if(void 0==n&&(n=this.getNode(e),null==n))return t;n.df>0&&t.push(e);for(var i in n)"docs"!==i&&"df"!==i&&this.expandToken(e+i,t,n[i]);return t},t.InvertedIndex.prototype.toJSON=function(){return{root:this.root}},t.Configuration=function(e,n){var e=e||"";if(void 0==n||null==n)throw new Error("fields should not be null");this.config={};var i;try{i=JSON.parse(e),this.buildUserConfig(i,n)}catch(o){t.utils.warn("user configuration parse failed, will use default configuration"),this.buildDefaultConfig(n)}},t.Configuration.prototype.buildDefaultConfig=function(e){this.reset(),e.forEach(function(e){this.config[e]={boost:1,bool:"OR",expand:!1}},this)},t.Configuration.prototype.buildUserConfig=function(e,n){var i="OR",o=!1;if(this.reset(),"bool"in e&&(i=e.bool||i),"expand"in e&&(o=e.expand||o),"fields"in e)for(var r in e.fields)if(n.indexOf(r)>-1){var s=e.fields[r],u=o;void 0!=s.expand&&(u=s.expand),this.config[r]={boost:s.boost||0===s.boost?s.boost:1,bool:s.bool||i,expand:u}}else t.utils.warn("field name in user configuration not found in index instance fields");else this.addAllFields2UserConfig(i,o,n)},t.Configuration.prototype.addAllFields2UserConfig=function(e,t,n){n.forEach(function(n){this.config[n]={boost:1,bool:e,expand:t}},this)},t.Configuration.prototype.get=function(){return this.config},t.Configuration.prototype.reset=function(){this.config={}},lunr.SortedSet=function(){this.length=0,this.elements=[]},lunr.SortedSet.load=function(e){var t=new this;return t.elements=e,t.length=e.length,t},lunr.SortedSet.prototype.add=function(){var e,t;for(e=0;e<arguments.length;e++)t=arguments[e],~this.indexOf(t)||this.elements.splice(this.locationFor(t),0,t);this.length=this.elements.length},lunr.SortedSet.prototype.toArray=function(){return this.elements.slice()},lunr.SortedSet.prototype.map=function(e,t){return this.elements.map(e,t)},lunr.SortedSet.prototype.forEach=function(e,t){return this.elements.forEach(e,t)},lunr.SortedSet.prototype.indexOf=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;){if(r===e)return o;e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o]}return r===e?o:-1},lunr.SortedSet.prototype.locationFor=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;)e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o];return r>e?o:e>r?o+1:void 0},lunr.SortedSet.prototype.intersect=function(e){for(var t=new lunr.SortedSet,n=0,i=0,o=this.length,r=e.length,s=this.elements,u=e.elements;;){if(n>o-1||i>r-1)break;s[n]!==u[i]?s[n]<u[i]?n++:s[n]>u[i]&&i++:(t.add(s[n]),n++,i++)}return t},lunr.SortedSet.prototype.clone=function(){var e=new lunr.SortedSet;return e.elements=this.toArray(),e.length=e.elements.length,e},lunr.SortedSet.prototype.union=function(e){var t,n,i;this.length>=e.length?(t=this,n=e):(t=e,n=this),i=t.clone();for(var o=0,r=n.toArray();o<r.length;o++)i.add(r[o]);return i},lunr.SortedSet.prototype.toJSON=function(){return this.toArray()},function(e,t){"function"==typeof define&&define.amd?define(t):"object"==typeof exports?module.exports=t():e.elasticlunr=t()}(this,function(){return t})}();
    /** pdoc search index */const docs = [{"fullname": "safethread", "modulename": "safethread", "kind": "module", "doc": "<p>The <code>safethread</code> package provides a collection of thread-safe utilities for managing data structures and synchronization in multi-threaded environments.</p>\n\n<p>The package is designed to ensure safe, concurrent operations on common Python data structures such as lists, dictionaries among others.</p>\n\n<h3 id=\"modules\"><strong>Modules:</strong></h3>\n\n<ul>\n<li><strong>datatype</strong>: Provides thread-safe data structures like <code>SafeList</code> and <code>SafeDict</code>.</li>\n<li><strong>thread</strong>: Provides thread-safe classes for multi-threaded programming like <code>Subprocess</code>.</li>\n<li><strong>utils</strong>: Offers utility functions and classes.</li>\n</ul>\n\n<h3 id=\"features\"><strong>Features:</strong></h3>\n\n<ul>\n<li><strong>Thread-Safe Data Structures</strong>: Safe implementations of common data structures (list, dict) to avoid race conditions in concurrent threads.</li>\n<li><strong>Thread Synchronization</strong>: Use of Python's <code>threading.Lock</code> to manage concurrent access to shared resources.</li>\n<li><strong>Threaded Classes</strong>: Threaded classes to perform parallel data processing , scheduled function calls (<code>Scheduler</code>), among others.</li>\n<li><strong>Utility Classes</strong>: Additional helpers and utilities for threading (<code>Pipeline</code>, <code>PipelineStage</code>, <code>Publish</code>/<code>Subscribe</code>, etc), synchronization and other functionality unrelated to multithread programming.</li>\n</ul>\n\n<h3 id=\"installation\"><strong>Installation:</strong></h3>\n\n<ul>\n<li>Install via PyPI: <code>pip install safethread</code></li>\n<li>Clone the repository for local development: <code>git clone https://github.com/andre-romano/safethread.git</code></li>\n</ul>\n\n<h3 id=\"license\"><strong>License:</strong></h3>\n\n<ul>\n<li>Apache-2.0 License</li>\n</ul>\n"}, {"fullname": "safethread.datatype", "modulename": "safethread.datatype", "kind": "module", "doc": "<p>This module provides classes and utilities for thread synchronization, as well as thread-safe data structures to be used in concurrent programming scenarios.</p>\n\n<h3 id=\"classes\"><strong>Classes:</strong></h3>\n\n<ul>\n<li><strong>SafeDict</strong>: A thread-safe dictionary implementation.</li>\n<li><strong>SafeList</strong>: A thread-safe list implementation.</li>\n<li><strong>SafeQueue</strong>: A thread-safe queue implementation.</li>\n<li><strong>SafeSet</strong>: A thread-safe set implementation.</li>\n<li><strong>SafeTuple</strong>: A thread-safe tuple implementation.</li>\n</ul>\n"}, {"fullname": "safethread.datatype.SafeBaseObj", "modulename": "safethread.datatype.SafeBaseObj", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "safethread.datatype.SafeBaseObj.SafeBaseObj", "modulename": "safethread.datatype.SafeBaseObj", "qualname": "SafeBaseObj", "kind": "class", "doc": "<p>A thread-safe wrapper around a data object, ensuring safe access\nin multithreaded environments using locking mechanisms.</p>\n"}, {"fullname": "safethread.datatype.SafeBaseObj.SafeBaseObj.__init__", "modulename": "safethread.datatype.SafeBaseObj", "qualname": "SafeBaseObj.__init__", "kind": "function", "doc": "<p>Initialize a thread-safe object with an internal lock.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>data</strong>:  The initial data to be wrapped in a thread-safe manner.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">data</span></span>)</span>"}, {"fullname": "safethread.datatype.SafeBaseObj.SafeBaseObj.create", "modulename": "safethread.datatype.SafeBaseObj", "qualname": "SafeBaseObj.create", "kind": "function", "doc": "<p>Create an instance of the class.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>args</strong>:  Arguments to initialize the instance.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>A new instance of <code>SafeBaseObj</code>.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">cls</span>, </span><span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Self</span>:</span></span>", "funcdef": "def"}, {"fullname": "safethread.datatype.SafeBaseObj.SafeBaseObj.execute", "modulename": "safethread.datatype.SafeBaseObj", "qualname": "SafeBaseObj.execute", "kind": "function", "doc": "<p>Run a callback function in a thread-safe manner.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>callback</strong>:  The function to execute safely.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">callback</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "safethread.datatype.SafeBaseObj.SafeBaseObj.copy", "modulename": "safethread.datatype.SafeBaseObj", "qualname": "SafeBaseObj.copy", "kind": "function", "doc": "<p>Return a thread-safe copy of the object.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>A new instance of <code>SafeBaseObj</code> containing a copy of the data.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "safethread.datatype.SafeBaseObj.SafeBaseObj.copyObj", "modulename": "safethread.datatype.SafeBaseObj", "qualname": "SafeBaseObj.copyObj", "kind": "function", "doc": "<p>Return an internal data copy.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>A copy of the internal data</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "safethread.datatype.SafeDict", "modulename": "safethread.datatype.SafeDict", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "safethread.datatype.SafeDict.SafeDict", "modulename": "safethread.datatype.SafeDict", "qualname": "SafeDict", "kind": "class", "doc": "<p>A thread-safe wrapper around a data object, ensuring safe access\nin multithreaded environments using locking mechanisms.</p>\n", "bases": "safethread.datatype.SafeBaseObj.SafeBaseObj"}, {"fullname": "safethread.datatype.SafeDict.SafeDict.__init__", "modulename": "safethread.datatype.SafeDict", "qualname": "SafeDict.__init__", "kind": "function", "doc": "<p>Initialize a shared dictionary with a Lock for thread safety.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>data</strong>:  Initial data to populate the dictionary. Defaults to None.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">,</span> <span class=\"n\">Iterable</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, {"fullname": "safethread.datatype.SafeDict.SafeDict.clear", "modulename": "safethread.datatype.SafeDict", "qualname": "SafeDict.clear", "kind": "function", "doc": "<p>Safely clear the dictionary.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "safethread.datatype.SafeDict.SafeDict.fromkeys", "modulename": "safethread.datatype.SafeDict", "qualname": "SafeDict.fromkeys", "kind": "function", "doc": "<p>Create a new dictionary with keys from an iterable and values set to a specified value.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>iterable</strong>:  Iterable containing the keys for the new dictionary.</li>\n<li><strong>value</strong>:  Value assigned to each key. Defaults to None.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>A new dictionary with the specified keys and values.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">iterable</span><span class=\"p\">:</span> <span class=\"n\">Iterable</span>, </span><span class=\"param\"><span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Any</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "safethread.datatype.SafeDict.SafeDict.get", "modulename": "safethread.datatype.SafeDict", "qualname": "SafeDict.get", "kind": "function", "doc": "<p>Safely retrieve a value from the dictionary.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>key</strong>:  The key to look up.</li>\n<li><strong>default</strong>:  The default value if the key is not found. Defaults to None.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>The value associated with the key, or the default value.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">key</span>, </span><span class=\"param\"><span class=\"n\">default</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "safethread.datatype.SafeDict.SafeDict.items", "modulename": "safethread.datatype.SafeDict", "qualname": "SafeDict.items", "kind": "function", "doc": "<p>Return a set-like view of dictionary items (key-value pairs).</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>A view object displaying the dictionary's items.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "safethread.datatype.SafeDict.SafeDict.keys", "modulename": "safethread.datatype.SafeDict", "qualname": "SafeDict.keys", "kind": "function", "doc": "<p>Return a set-like view of dictionary keys.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>A view object displaying the dictionary's keys.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "safethread.datatype.SafeDict.SafeDict.pop", "modulename": "safethread.datatype.SafeDict", "qualname": "SafeDict.pop", "kind": "function", "doc": "<p>Remove the specified key and return the corresponding value.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>key</strong>:  The key to remove.</li>\n<li><strong>default</strong>:  The default value to return if the key is not found. Defaults to None.</li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>KeyError</strong>:  If the key is not found and no default value is provided.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>The value associated with the key, or the default value.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">key</span>, </span><span class=\"param\"><span class=\"n\">default</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "safethread.datatype.SafeDict.SafeDict.popitem", "modulename": "safethread.datatype.SafeDict", "qualname": "SafeDict.popitem", "kind": "function", "doc": "<p>Remove and return the last key-value pair from the dictionary in a thread-safe manner.</p>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>KeyError</strong>:  If the dictionary is empty.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>The last key-value pair removed from the dictionary.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "safethread.datatype.SafeDict.SafeDict.setdefault", "modulename": "safethread.datatype.SafeDict", "qualname": "SafeDict.setdefault", "kind": "function", "doc": "<p>Retrieve the value for a given key if it exists; otherwise, insert the key with the provided default value.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>key</strong>:  The key to look up in the dictionary.</li>\n<li><strong>default</strong>:  The value to set if the key is not found. Defaults to None.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>The value associated with the key if it exists; otherwise, the default value that was set.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">key</span>, </span><span class=\"param\"><span class=\"n\">default</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "safethread.datatype.SafeDict.SafeDict.update", "modulename": "safethread.datatype.SafeDict", "qualname": "SafeDict.update", "kind": "function", "doc": "<p>Update the dictionary with key-value pairs from another dictionary or iterable of key-value pairs.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>m</strong>:  A dictionary or an iterable of key-value pairs (e.g., list of tuples) to update the dictionary with.</li>\n<li><strong>kwargs</strong>:  Additional key-value pairs to update the dictionary.</li>\n</ul>\n\n<p><strong>Example:</strong></p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">safe_dict</span><span class=\"o\">.</span><span class=\"n\">update</span><span class=\"p\">({</span><span class=\"s1\">&#39;a&#39;</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"s1\">&#39;b&#39;</span><span class=\"p\">:</span> <span class=\"mi\">2</span><span class=\"p\">})</span>\n<span class=\"n\">safe_dict</span><span class=\"o\">.</span><span class=\"n\">update</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"o\">=</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"o\">=</span><span class=\"mi\">4</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">m</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Iterable</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "safethread.datatype.SafeDict.SafeDict.values", "modulename": "safethread.datatype.SafeDict", "qualname": "SafeDict.values", "kind": "function", "doc": "<p>Return a set-like view of dictionary values.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>A view object displaying the dictionary's values.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "safethread.datatype.SafeList", "modulename": "safethread.datatype.SafeList", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "safethread.datatype.SafeList.SafeList", "modulename": "safethread.datatype.SafeList", "qualname": "SafeList", "kind": "class", "doc": "<p>A thread-safe wrapper around a data object, ensuring safe access\nin multithreaded environments using locking mechanisms.</p>\n", "bases": "safethread.datatype.SafeBaseObj.SafeBaseObj"}, {"fullname": "safethread.datatype.SafeList.SafeList.__init__", "modulename": "safethread.datatype.SafeList", "qualname": "SafeList.__init__", "kind": "function", "doc": "<p>Initializes a shared list with a lock for thread safety.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>data</strong>:  The initial data to populate the list with.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">list</span><span class=\"p\">,</span> <span class=\"n\">Iterable</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, {"fullname": "safethread.datatype.SafeList.SafeList.append", "modulename": "safethread.datatype.SafeList", "qualname": "SafeList.append", "kind": "function", "doc": "<p>Adds an item to the list safely.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>value</strong>:  The item to be added to the list.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">value</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "safethread.datatype.SafeList.SafeList.clear", "modulename": "safethread.datatype.SafeList", "qualname": "SafeList.clear", "kind": "function", "doc": "<p>Clears the list safely.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "safethread.datatype.SafeList.SafeList.count", "modulename": "safethread.datatype.SafeList", "qualname": "SafeList.count", "kind": "function", "doc": "<p>Counts the occurrences of an item in the list.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>value</strong>:  The item whose occurrences to count.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>The number of occurrences of the item in the list.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">value</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "safethread.datatype.SafeList.SafeList.extend", "modulename": "safethread.datatype.SafeList", "qualname": "SafeList.extend", "kind": "function", "doc": "<p>Adds multiple items to the list safely.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>values</strong>:  The items to be added to the list.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">values</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "safethread.datatype.SafeList.SafeList.index", "modulename": "safethread.datatype.SafeList", "qualname": "SafeList.index", "kind": "function", "doc": "<p>Returns the index of the first matching item safely.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>value</strong>:  The item to find in the list.</li>\n<li><strong>start</strong>:  The starting index for the search. Defaults to 0.</li>\n<li><strong>end</strong>:  The ending index for the search. Defaults to None.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>The index of the first matching item.</p>\n</blockquote>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>ValueError</strong>:  If the item is not found in the list.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">value</span>, </span><span class=\"param\"><span class=\"n\">start</span><span class=\"o\">=</span><span class=\"mi\">0</span>, </span><span class=\"param\"><span class=\"n\">end</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "safethread.datatype.SafeList.SafeList.insert", "modulename": "safethread.datatype.SafeList", "qualname": "SafeList.insert", "kind": "function", "doc": "<p>Inserts an item at the specified position safely.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>index</strong>:  The index at which to insert the item.</li>\n<li><strong>value</strong>:  The item to insert.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">index</span>, </span><span class=\"param\"><span class=\"n\">value</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "safethread.datatype.SafeList.SafeList.pop", "modulename": "safethread.datatype.SafeList", "qualname": "SafeList.pop", "kind": "function", "doc": "<p>Removes and returns an item from the list safely.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>index</strong>:  The index of the item to remove. Defaults to -1 (last item).</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>The removed item.</p>\n</blockquote>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>IndexError</strong>:  If the list is empty or the index is out of range.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">index</span><span class=\"o\">=-</span><span class=\"mi\">1</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "safethread.datatype.SafeList.SafeList.remove", "modulename": "safethread.datatype.SafeList", "qualname": "SafeList.remove", "kind": "function", "doc": "<p>Removes an item from the list safely.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>value</strong>:  The item to remove from the list.</li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>ValueError</strong>:  If the item is not found in the list.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">value</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "safethread.datatype.SafeList.SafeList.reverse", "modulename": "safethread.datatype.SafeList", "qualname": "SafeList.reverse", "kind": "function", "doc": "<p>Reverses the order of the list safely.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "safethread.datatype.SafeList.SafeList.sort", "modulename": "safethread.datatype.SafeList", "qualname": "SafeList.sort", "kind": "function", "doc": "<p>Sorts the list safely.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>kwargs</strong>:  Additional arguments to pass to the sort function.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>None</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "safethread.datatype.SafeQueue", "modulename": "safethread.datatype.SafeQueue", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "safethread.datatype.SafeQueue.SafeQueue", "modulename": "safethread.datatype.SafeQueue", "qualname": "SafeQueue", "kind": "class", "doc": "<p>Create a queue object with a given maximum size.</p>\n\n<p>If maxsize is &lt;= 0, the queue size is infinite.</p>\n", "bases": "queue.Queue, safethread.datatype.SafeBaseObj.SafeBaseObj"}, {"fullname": "safethread.datatype.SafeQueue.SafeQueue.__init__", "modulename": "safethread.datatype.SafeQueue", "qualname": "SafeQueue.__init__", "kind": "function", "doc": "<p>Initialize the thread-safe queue.</p>\n\n<p>If a <code>Queue</code> is provided, its items are copied into the new queue.\nIf an integer is provided, it sets the maximum size of the queue.\nIf no argument is provided, the queue is initialized with an unlimited size.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>data</strong>:  The initial data to populate the queue with, or the maximum size.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"n\">queue</span><span class=\"o\">.</span><span class=\"n\">Queue</span> <span class=\"o\">|</span> <span class=\"nb\">int</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, {"fullname": "safethread.datatype.SafeSet", "modulename": "safethread.datatype.SafeSet", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "safethread.datatype.SafeSet.SafeSet", "modulename": "safethread.datatype.SafeSet", "qualname": "SafeSet", "kind": "class", "doc": "<p>A thread-safe wrapper around a data object, ensuring safe access\nin multithreaded environments using locking mechanisms.</p>\n", "bases": "safethread.datatype.SafeBaseObj.SafeBaseObj"}, {"fullname": "safethread.datatype.SafeSet.SafeSet.__init__", "modulename": "safethread.datatype.SafeSet", "qualname": "SafeSet.__init__", "kind": "function", "doc": "<p>Initialize a shared set with a Lock for thread safety.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>data</strong>:  The initial data to populate the set with.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">set</span><span class=\"p\">,</span> <span class=\"n\">Iterable</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, {"fullname": "safethread.datatype.SafeSet.SafeSet.add", "modulename": "safethread.datatype.SafeSet", "qualname": "SafeSet.add", "kind": "function", "doc": "<p>Adds an element to the set, thread-safe.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>value</strong>:  The element to add to the set.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">value</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "safethread.datatype.SafeSet.SafeSet.clear", "modulename": "safethread.datatype.SafeSet", "qualname": "SafeSet.clear", "kind": "function", "doc": "<p>Removes all elements from the set, thread-safe.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "safethread.datatype.SafeSet.SafeSet.difference", "modulename": "safethread.datatype.SafeSet", "qualname": "SafeSet.difference", "kind": "function", "doc": "<p>Returns a new set with elements in the set but not in the others, thread-safe.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>others</strong>:  Sets to subtract from the current set.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>A new set with the difference.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">*</span><span class=\"n\">others</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "safethread.datatype.SafeSet.SafeSet.difference_update", "modulename": "safethread.datatype.SafeSet", "qualname": "SafeSet.difference_update", "kind": "function", "doc": "<p>Removes all elements of another set from the current set, thread-safe.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>others</strong>:  Sets to subtract from the current set.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">*</span><span class=\"n\">others</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "safethread.datatype.SafeSet.SafeSet.discard", "modulename": "safethread.datatype.SafeSet", "qualname": "SafeSet.discard", "kind": "function", "doc": "<p>Removes an element from the set if present, thread-safe. Does nothing if not present.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>value</strong>:  The element to remove from the set.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">value</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "safethread.datatype.SafeSet.SafeSet.intersection", "modulename": "safethread.datatype.SafeSet", "qualname": "SafeSet.intersection", "kind": "function", "doc": "<p>Returns a new set with elements common to the set and all others, thread-safe.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>others</strong>:  Sets to intersect with the current set.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>A new set with the intersection.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">*</span><span class=\"n\">others</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "safethread.datatype.SafeSet.SafeSet.intersection_update", "modulename": "safethread.datatype.SafeSet", "qualname": "SafeSet.intersection_update", "kind": "function", "doc": "<p>Updates the set with the intersection of itself and others, thread-safe.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>others</strong>:  Sets to intersect with the current set.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">*</span><span class=\"n\">others</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "safethread.datatype.SafeSet.SafeSet.isdisjoint", "modulename": "safethread.datatype.SafeSet", "qualname": "SafeSet.isdisjoint", "kind": "function", "doc": "<p>Returns True if the set has no elements in common with another set, thread-safe.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>other</strong>:  The other set to compare.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p><code>True</code> if the sets are disjoint, otherwise <code>False</code>.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">other</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "safethread.datatype.SafeSet.SafeSet.issubset", "modulename": "safethread.datatype.SafeSet", "qualname": "SafeSet.issubset", "kind": "function", "doc": "<p>Returns True if the set is a subset of another set, thread-safe.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>other</strong>:  The other set to compare.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p><code>True</code> if the set is a subset, otherwise <code>False</code>.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">other</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "safethread.datatype.SafeSet.SafeSet.issuperset", "modulename": "safethread.datatype.SafeSet", "qualname": "SafeSet.issuperset", "kind": "function", "doc": "<p>Returns True if the set is a superset of another set, thread-safe.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>other</strong>:  The other set to compare.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p><code>True</code> if the set is a superset, otherwise <code>False</code>.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">other</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "safethread.datatype.SafeSet.SafeSet.pop", "modulename": "safethread.datatype.SafeSet", "qualname": "SafeSet.pop", "kind": "function", "doc": "<p>Removes and returns an arbitrary element from the set, thread-safe.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>An arbitrary element from the set.</p>\n</blockquote>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>KeyError</strong>:  If the set is empty.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "safethread.datatype.SafeSet.SafeSet.remove", "modulename": "safethread.datatype.SafeSet", "qualname": "SafeSet.remove", "kind": "function", "doc": "<p>Removes an element from the set, thread-safe. Raises KeyError if not present.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>value</strong>:  The element to remove from the set.</li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>KeyError</strong>:  If the element is not found in the set.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">value</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "safethread.datatype.SafeSet.SafeSet.symmetric_difference", "modulename": "safethread.datatype.SafeSet", "qualname": "SafeSet.symmetric_difference", "kind": "function", "doc": "<p>Returns a new set with elements in either the set or other but not both, thread-safe.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>other</strong>:  The set to compare.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>A new set with the symmetric difference.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">other</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "safethread.datatype.SafeSet.SafeSet.symmetric_difference_update", "modulename": "safethread.datatype.SafeSet", "qualname": "SafeSet.symmetric_difference_update", "kind": "function", "doc": "<p>Updates the set with the symmetric difference of itself and another set, thread-safe.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>other</strong>:  The set to compare.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">other</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "safethread.datatype.SafeSet.SafeSet.union", "modulename": "safethread.datatype.SafeSet", "qualname": "SafeSet.union", "kind": "function", "doc": "<p>Returns a new set with all elements from the set and all others, thread-safe.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>others</strong>:  Sets to combine with the current set.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>A new set with the union.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">*</span><span class=\"n\">others</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "safethread.datatype.SafeSet.SafeSet.update", "modulename": "safethread.datatype.SafeSet", "qualname": "SafeSet.update", "kind": "function", "doc": "<p>Updates the set with elements from all others, thread-safe.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>others</strong>:  Sets to add to the current set.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">*</span><span class=\"n\">others</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "safethread.datatype.SafeTuple", "modulename": "safethread.datatype.SafeTuple", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "safethread.datatype.SafeTuple.SafeTuple", "modulename": "safethread.datatype.SafeTuple", "qualname": "SafeTuple", "kind": "class", "doc": "<p>Built-in immutable sequence.</p>\n\n<p>If no argument is given, the constructor returns an empty tuple.\nIf iterable is specified the tuple is initialized from iterable's items.</p>\n\n<p>If the argument is a tuple, the return value is the same object.</p>\n", "bases": "builtins.tuple, safethread.datatype.SafeBaseObj.SafeBaseObj"}, {"fullname": "safethread.datatype.SafeTuple.SafeTuple.__init__", "modulename": "safethread.datatype.SafeTuple", "qualname": "SafeTuple.__init__", "kind": "function", "doc": "<p>Initialize a shared tuple with a Lock for thread safety.</p>\n\n<p>If a <code>tuple</code> is provided, it is used as the initial data.\nIf an iterable is provided, it is converted into a tuple.\nIf no argument is provided, an empty tuple is used.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>data</strong>:  The initial data to populate the tuple with.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">tuple</span><span class=\"p\">,</span> <span class=\"n\">Iterable</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, {"fullname": "safethread.thread", "modulename": "safethread.thread", "kind": "module", "doc": "<p>This module provides threaded classes that inherit from ThreadBase.</p>\n\n<p>Classes:</p>\n\n<ul>\n<li><strong>Scheduler</strong>: A class that runs a scheduled Callable (function, lambda, etc), after a pre-defined timeout, either singleshot or periodically.</li>\n<li><strong>Subprocess</strong>: A class that runs a subprocess within a separate thread.</li>\n<li><strong>ThreadBase</strong>: An abstract class manages threads.</li>\n</ul>\n"}, {"fullname": "safethread.thread.Scheduler", "modulename": "safethread.thread.Scheduler", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "safethread.thread.Scheduler.Scheduler", "modulename": "safethread.thread.Scheduler", "qualname": "Scheduler", "kind": "class", "doc": "<p>A thread scheduler that runs a given callback at regular intervals with an optional repeat option.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>timeout</strong>:  Time interval in seconds between each callback execution.</li>\n<li><strong>callback</strong>:  The function (or callable) to execute at each timeout.</li>\n<li><strong>args</strong>:  Optional arguments to pass to the callback. Defaults to None.</li>\n<li><strong>repeat</strong>:  Whether the callback should be repeated indefinitely or just once. Defaults to True.</li>\n</ul>\n\n<p><img src=\"../../../img/thread/Scheduler.svg\" alt=\"\" width=\"100%\"></p>\n", "bases": "safethread.thread.ThreadBase.ThreadBase"}, {"fullname": "safethread.thread.Scheduler.Scheduler.__init__", "modulename": "safethread.thread.Scheduler", "qualname": "Scheduler.__init__", "kind": "function", "doc": "<p>Initializes the scheduler with the given parameters.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>timeout</strong>:  Time interval in seconds between each callback execution.</li>\n<li><strong>callback</strong>:  The function (or callable) to execute at each timeout.</li>\n<li><strong>args</strong>:  Optional arguments to pass to the callback. Defaults to None.</li>\n<li><strong>repeat</strong>:  Whether the callback should be repeated indefinitely or just once. Defaults to True.</li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>ThreadBase.CallableException</strong>:  If 'callback' is not callable.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">timeout</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">callback</span><span class=\"p\">:</span> <span class=\"n\">Callable</span>,</span><span class=\"param\">\t<span class=\"n\">args</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Iterable</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">repeat</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span></span>)</span>"}, {"fullname": "safethread.thread.Scheduler.Scheduler.get_timeout", "modulename": "safethread.thread.Scheduler", "qualname": "Scheduler.get_timeout", "kind": "function", "doc": "<p>Returns scheduler timeout.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">float</span>:</span></span>", "funcdef": "def"}, {"fullname": "safethread.thread.Subprocess", "modulename": "safethread.thread.Subprocess", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "safethread.thread.Subprocess.Subprocess", "modulename": "safethread.thread.Subprocess", "qualname": "Subprocess", "kind": "class", "doc": "<p>A base class for managing threads with thread safety.</p>\n\n<p>This class provides a structure for creating and managing threads using the threading module.\nIt also ensures that the thread's operations are protected by a reentrant lock (_lock) to ensure thread safety.</p>\n", "bases": "safethread.thread.ThreadBase.ThreadBase"}, {"fullname": "safethread.thread.Subprocess.Subprocess.__init__", "modulename": "safethread.thread.Subprocess", "qualname": "Subprocess.__init__", "kind": "function", "doc": "<p>Initializes the thread-safe Subprocess object with the command to run.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>command</strong>:  The command to run as an iterable or a string.</li>\n<li><strong>daemon</strong>:  Whether the thread should be a daemon thread. Defaults to True.</li>\n<li><strong>timeout</strong>:  Timeout of the subprocess. Defaults to no timeout (None).</li>\n<li><strong>env</strong>:  Environment to run the subprocess. Defaults to current ENV (None).</li>\n<li><strong>cwd</strong>:  Working directory to run the subprocess. Defaults to current directory (None).</li>\n<li>**callback: Callback to execute after subprocess terminates. Expected format: <code>lambda result: some_code_here</code>, where <code>result**:  Subprocess.Finished</code>. Defaults to None.</li>\n<li><strong>repeat</strong>:  Whether the thread should execute subprocess repeatedly (until .stop() is called). Defaults to False.</li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>TypeError</strong>:  If <code>command</code> is not a string or an iterable of strings.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">command</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">Iterable</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">],</span> <span class=\"nb\">str</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">daemon</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">timeout</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">env</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">cwd</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">callback</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Callable</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">repeat</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span>)</span>"}, {"fullname": "safethread.thread.Subprocess.Subprocess.NotTerminatedException", "modulename": "safethread.thread.Subprocess", "qualname": "Subprocess.NotTerminatedException", "kind": "class", "doc": "<p>Raised when trying to get return data about an unfinished subprocess</p>\n", "bases": "builtins.Exception"}, {"fullname": "safethread.thread.Subprocess.Subprocess.Finished", "modulename": "safethread.thread.Subprocess", "qualname": "Subprocess.Finished", "kind": "class", "doc": "<p>Stores information about the finished subprocess</p>\n"}, {"fullname": "safethread.thread.Subprocess.Subprocess.Finished.__init__", "modulename": "safethread.thread.Subprocess", "qualname": "Subprocess.Finished.__init__", "kind": "function", "doc": "<p>Creates a Finished structure for a recently finished subprocess</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>args</strong>:  Command arguments of subprocess</li>\n<li><strong>returncode</strong>:  Return code of subprocess</li>\n<li><strong>stderr</strong>:  STDERR output of subprocess</li>\n<li><strong>stdout</strong>:  STDOUT output of subprocess</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">args</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>, </span><span class=\"param\"><span class=\"n\">returncode</span><span class=\"p\">:</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"n\">stderr</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">stdout</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span>)</span>"}, {"fullname": "safethread.thread.Subprocess.Subprocess.Finished.returncode", "modulename": "safethread.thread.Subprocess", "qualname": "Subprocess.Finished.returncode", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "safethread.thread.Subprocess.Subprocess.Finished.args", "modulename": "safethread.thread.Subprocess", "qualname": "Subprocess.Finished.args", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "safethread.thread.Subprocess.Subprocess.Finished.stderr", "modulename": "safethread.thread.Subprocess", "qualname": "Subprocess.Finished.stderr", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "safethread.thread.Subprocess.Subprocess.Finished.stdout", "modulename": "safethread.thread.Subprocess", "qualname": "Subprocess.Finished.stdout", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "safethread.thread.Subprocess.Subprocess.get_return_code", "modulename": "safethread.thread.Subprocess", "qualname": "Subprocess.get_return_code", "kind": "function", "doc": "<p>Returns the return code of the subprocess.</p>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>NotTerminatedException</strong>:  If the subprocess has not yet terminated.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>The return code of the subprocess.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, {"fullname": "safethread.thread.Subprocess.Subprocess.get_stdout", "modulename": "safethread.thread.Subprocess", "qualname": "Subprocess.get_stdout", "kind": "function", "doc": "<p>Returns the standard output of the subprocess.</p>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>NotTerminatedException</strong>:  If the subprocess has not yet terminated.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>The standard output of the subprocess.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "safethread.thread.Subprocess.Subprocess.get_stderr", "modulename": "safethread.thread.Subprocess", "qualname": "Subprocess.get_stderr", "kind": "function", "doc": "<p>Returns the standard error output of the subprocess.</p>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>NotTerminatedException</strong>:  If the subprocess has not yet terminated.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>The standard error output of the subprocess.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "safethread.thread.ThreadBase", "modulename": "safethread.thread.ThreadBase", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "safethread.thread.ThreadBase.ThreadBase", "modulename": "safethread.thread.ThreadBase", "qualname": "ThreadBase", "kind": "class", "doc": "<p>A base class for managing threads with thread safety.</p>\n\n<p>This class provides a structure for creating and managing threads using the threading module.\nIt also ensures that the thread's operations are protected by a reentrant lock (_lock) to ensure thread safety.</p>\n"}, {"fullname": "safethread.thread.ThreadBase.ThreadBase.__init__", "modulename": "safethread.thread.ThreadBase", "qualname": "ThreadBase.__init__", "kind": "function", "doc": "<p>Initializes the thread.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>callback: The Callable to check. Format</strong>:  callback(*args)</li>\n<li><strong>args</strong>:  The arguments to pass to the callback() method when the thread starts.</li>\n<li><strong>daemon</strong>:  If True, the thread will be daemonized. Defaults to True.</li>\n<li><strong>repeat</strong>:  If True, the thread will repeat the execution of callback until .stop() is called. Defaults to False.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">callback</span><span class=\"p\">:</span> <span class=\"n\">Callable</span>,</span><span class=\"param\">\t<span class=\"n\">args</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Iterable</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">daemon</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">repeat</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span>)</span>"}, {"fullname": "safethread.thread.ThreadBase.ThreadBase.CallableException", "modulename": "safethread.thread.ThreadBase", "qualname": "ThreadBase.CallableException", "kind": "class", "doc": "<p>Raised if a callable argument is not a Callable class (e.g., lambda, function, etc)</p>\n", "bases": "builtins.Exception"}, {"fullname": "safethread.thread.ThreadBase.ThreadBase.is_callable", "modulename": "safethread.thread.ThreadBase", "qualname": "ThreadBase.is_callable", "kind": "function", "doc": "<p>Checks if callback is a Callable (function, lambda, etc).</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>callback</strong>:  The Callable to check.</li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>ThreadBase.CallableException</strong>:  If the callback argument is not callable.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>The callback Callable.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">callback</span><span class=\"p\">:</span> <span class=\"n\">Callable</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Callable</span>:</span></span>", "funcdef": "def"}, {"fullname": "safethread.thread.ThreadBase.ThreadBase.get_lock", "modulename": "safethread.thread.ThreadBase", "qualname": "ThreadBase.get_lock", "kind": "function", "doc": "<p>Get a new instance of RLock (reentrant lock).</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "safethread.thread.ThreadBase.ThreadBase.get_args", "modulename": "safethread.thread.ThreadBase", "qualname": "ThreadBase.get_args", "kind": "function", "doc": "<p>Gets the callback args</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span>:</span></span>", "funcdef": "def"}, {"fullname": "safethread.thread.ThreadBase.ThreadBase.has_started", "modulename": "safethread.thread.ThreadBase", "qualname": "ThreadBase.has_started", "kind": "function", "doc": "<p>Checks if the thread has started.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>True if thread has started, otherwise False.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "safethread.thread.ThreadBase.ThreadBase.is_alive", "modulename": "safethread.thread.ThreadBase", "qualname": "ThreadBase.is_alive", "kind": "function", "doc": "<p>Checks if the thread is alive.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>True if thread is alive, otherwise False.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "safethread.thread.ThreadBase.ThreadBase.is_terminated", "modulename": "safethread.thread.ThreadBase", "qualname": "ThreadBase.is_terminated", "kind": "function", "doc": "<p>Checks if the thread has terminated.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>True if thread HAS started and is NOT alive, otherwise False.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "safethread.thread.ThreadBase.ThreadBase.is_repeatable", "modulename": "safethread.thread.ThreadBase", "qualname": "ThreadBase.is_repeatable", "kind": "function", "doc": "<p>Returns True if thread executes callback repeatedly (until .stop() is called)</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "safethread.thread.ThreadBase.ThreadBase.is_daemon", "modulename": "safethread.thread.ThreadBase", "qualname": "ThreadBase.is_daemon", "kind": "function", "doc": "<p>Return whether this thread is a daemon.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "safethread.thread.ThreadBase.ThreadBase.set_daemon", "modulename": "safethread.thread.ThreadBase", "qualname": "ThreadBase.set_daemon", "kind": "function", "doc": "<p>Set whether this thread is a daemon.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">daemon</span><span class=\"p\">:</span> <span class=\"nb\">bool</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "safethread.thread.ThreadBase.ThreadBase.start", "modulename": "safethread.thread.ThreadBase", "qualname": "ThreadBase.start", "kind": "function", "doc": "<p>Starts the thread.</p>\n\n<p>This method begins the execution of the thread by calling the __run method in the background.</p>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>RuntimeError</strong>:  if start() is called more than once on the same thread object.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "safethread.thread.ThreadBase.ThreadBase.stop", "modulename": "safethread.thread.ThreadBase", "qualname": "ThreadBase.stop", "kind": "function", "doc": "<p>Stops the thread.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "safethread.thread.ThreadBase.ThreadBase.join", "modulename": "safethread.thread.ThreadBase", "qualname": "ThreadBase.join", "kind": "function", "doc": "<p>Joins the thread, waiting for it to finish.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>timeout</strong>:  The maximum time to wait for the thread to finish. Defaults to None.</li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>RuntimeError</strong>:  if an attempt is made to join the current thread, or the join() is called before start()</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">timeout</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "safethread.thread.ThreadBase.ThreadBase.stop_join", "modulename": "safethread.thread.ThreadBase", "qualname": "ThreadBase.stop_join", "kind": "function", "doc": "<p>Calls stop() and join() to stop the thread and wait for it to finish.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>timeout</strong>:  The maximum time to wait for thread to finish. Defaults to None.</li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>RuntimeError</strong>:  if an attempt is made to join the current thread (main thread), or the join() is called before start()</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">timeout</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "safethread.utils", "modulename": "safethread.utils", "kind": "module", "doc": "<p>This module provides utility functions and classes.</p>\n\n<p>Classes:</p>\n\n<ul>\n<li><strong>Factory</strong>: A thread-safe class that provides a <code>create()</code> method to create objects dynamically based on certain parameters or configurations. This can be used for creating objects of various types at runtime, without tightly coupling the client code to specific class implementations.</li>\n<li><strong>FileHandler</strong>: A thread-safe asynchronous file handler that allows non-blocking reading and writing operations in a file.</li>\n<li><strong>Pipeline</strong>: A thread-safe class that connects multiple <code>utils.PipelineStage</code> objects together (input_queue =&gt; Pipe 1 =&gt; Pipe 2 =&gt; ... =&gt; output_queue).</li>\n<li><strong>PipelineStage</strong>: A thread-safe class that runs threads to processes data (using a Callable) from an Input Queue and places its output in an Output Queue.</li>\n<li><strong>Publisher</strong>: A thread-safe class that maintains a list of Subscriber instances and notifies them when data changes.    </li>\n<li><strong>Singleton</strong>: A thread-safe class that ensures a SINGLE INSTANCE of an object is created and shared throughout the application. This is useful for managing resources or configurations that need to be globally accessible and consistent across the system.    </li>\n<li><strong>SocketClient</strong>:  A thread-safe asynchronous socket client that manages client-side sockets.</li>\n<li><strong>SocketServer</strong>:  A thread-safe asynchronous socket server handler that manages server and client sockets.</li>\n<li><strong>Subscriber</strong>: A thread-safe class that subscribes to a Publisher and receives notifications when data changes.</li>\n</ul>\n"}, {"fullname": "safethread.utils.Factory", "modulename": "safethread.utils.Factory", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "safethread.utils.Factory.Factory", "modulename": "safethread.utils.Factory", "qualname": "Factory", "kind": "class", "doc": "<p>Factory class, to control subclass creation using create() method.</p>\n"}, {"fullname": "safethread.utils.Factory.Factory.create", "modulename": "safethread.utils.Factory", "qualname": "Factory.create", "kind": "function", "doc": "<p>Creates an instance of Self class</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">cls</span>, </span><span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Self</span>:</span></span>", "funcdef": "def"}, {"fullname": "safethread.utils.FileHandler", "modulename": "safethread.utils.FileHandler", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "safethread.utils.FileHandler.FileHandler", "modulename": "safethread.utils.FileHandler", "qualname": "FileHandler", "kind": "class", "doc": "<p>A thread-safe asynchronous file handler that allows reading and writing operations \nusing separate threads and queues to ensure non-blocking behavior.</p>\n"}, {"fullname": "safethread.utils.FileHandler.FileHandler.__init__", "modulename": "safethread.utils.FileHandler", "qualname": "FileHandler.__init__", "kind": "function", "doc": "<p>Initializes the AsyncFileHandler.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>filename</strong>:  Name of the file to read and write.</li>\n<li><strong>max_queue_read_size</strong>:  Maximum number of lines stored in the read queue. Defaults to 100.</li>\n<li><strong>binary_mode</strong>:  True, if files must be read/write using binary mode (non-text), False otherwise. Defaults to False (text-mode).</li>\n<li><strong>encoding</strong>:  File encoding to use. If None, locale.getencoding() is called to get the current locale encoding. Defaults to 'utf-8'.</li>\n<li><strong>on_read_error</strong>:  A callback function that is called when an error happens when file is being read.\nThe function should accept one argument: the Exception.                                </li>\n<li><strong>on_write_error</strong>:  A callback function that is called when an error happens when file is being read.\nThe function should accept one argument: the Exception.                                </li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">filename</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">max_queue_read_size</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">100</span>,</span><span class=\"param\">\t<span class=\"n\">binary_mode</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">encoding</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;utf-8&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">on_read_error</span><span class=\"p\">:</span> <span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"ne\">Exception</span><span class=\"p\">],</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">function</span> <span class=\"n\">FileHandler</span><span class=\"o\">.&lt;</span><span class=\"k\">lambda</span><span class=\"o\">&gt;&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">on_write_error</span><span class=\"p\">:</span> <span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"ne\">Exception</span><span class=\"p\">],</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">function</span> <span class=\"n\">FileHandler</span><span class=\"o\">.&lt;</span><span class=\"k\">lambda</span><span class=\"o\">&gt;&gt;</span></span>)</span>"}, {"fullname": "safethread.utils.FileHandler.FileHandler.get", "modulename": "safethread.utils.FileHandler", "qualname": "FileHandler.get", "kind": "function", "doc": "<p>Retrieves a line from the read queue (buffer).</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>A line from the file, or None if the queue is empty.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Any</span> <span class=\"o\">|</span> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "safethread.utils.FileHandler.FileHandler.put", "modulename": "safethread.utils.FileHandler", "qualname": "FileHandler.put", "kind": "function", "doc": "<p>Adds a data to the write queue (buffer).</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>data</strong>:  The data to be written to the file.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>This file handler object.</p>\n</blockquote>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>RuntimeError</strong>:  if the write thread has terminated.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">data</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Self</span>:</span></span>", "funcdef": "def"}, {"fullname": "safethread.utils.FileHandler.FileHandler.get_status", "modulename": "safethread.utils.FileHandler", "qualname": "FileHandler.get_status", "kind": "function", "doc": "<p>Retrieves the current status of async read() / write() operations.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>A tuple containing a status code (0 for success, 1 for error) and an error message if any.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "safethread.utils.FileHandler.FileHandler.start_read", "modulename": "safethread.utils.FileHandler", "qualname": "FileHandler.start_read", "kind": "function", "doc": "<p>Starts the file reader thread.</p>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>RuntimeError</strong>:  if start_read() is called more than once.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "safethread.utils.FileHandler.FileHandler.start_write", "modulename": "safethread.utils.FileHandler", "qualname": "FileHandler.start_write", "kind": "function", "doc": "<p>Starts the file writer thread.</p>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>RuntimeError</strong>:  if start_write() is called more than once.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "safethread.utils.FileHandler.FileHandler.join_read", "modulename": "safethread.utils.FileHandler", "qualname": "FileHandler.join_read", "kind": "function", "doc": "<p>Joins the read thread, waiting for file reading operation to finish.</p>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>RuntimeError</strong>:  if an attempt is made to join the current thread (main thread), or the join() is called before start()</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "safethread.utils.FileHandler.FileHandler.join_write", "modulename": "safethread.utils.FileHandler", "qualname": "FileHandler.join_write", "kind": "function", "doc": "<p>Joins the write thread, waiting for file writing operation to finish.</p>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>RuntimeError</strong>:  if an attempt is made to join the current thread (main thread), or the join() is called before start()</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "safethread.utils.Pipeline", "modulename": "safethread.utils.Pipeline", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "safethread.utils.Pipeline.Pipeline", "modulename": "safethread.utils.Pipeline", "qualname": "Pipeline", "kind": "class", "doc": "<p>A processing pipeline composed of interconnected <code>PipelineStage</code> instances.</p>\n\n<p>This class manages the sequential execution of pipeline stages, allowing data \nto be passed through multiple stages of processing in a controlled manner.</p>\n\n<p>Example: input =&gt; Stage 1 =&gt; Stage 2 =&gt; ... =&gt; output    </p>\n\n<p><img src=\"../../../img/utils/Pipeline.svg\" alt=\"\" width=\"100%\"></p>\n"}, {"fullname": "safethread.utils.Pipeline.Pipeline.__init__", "modulename": "safethread.utils.Pipeline", "qualname": "Pipeline.__init__", "kind": "function", "doc": "<p>Initializes a pipeline with the given sequence of pipeline stages.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>pipeline_stages</strong>:  A collection of <code>PipelineStage</code> instances that make up the pipeline.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">pipeline_stages</span><span class=\"p\">:</span> <span class=\"n\">Iterable</span><span class=\"p\">[</span><span class=\"n\">safethread</span><span class=\"o\">.</span><span class=\"n\">utils</span><span class=\"o\">.</span><span class=\"n\">PipelineStage</span><span class=\"o\">.</span><span class=\"n\">PipelineStage</span><span class=\"p\">]</span></span>)</span>"}, {"fullname": "safethread.utils.Pipeline.Pipeline.get", "modulename": "safethread.utils.Pipeline", "qualname": "Pipeline.get", "kind": "function", "doc": "<p>Retrieves processed data from the last stage of the pipeline.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>block</strong>:  If True, waits for data to become available. Defaults to True.</li>\n<li><strong>timeout</strong>:  Maximum wait time for data retrieval. Defaults to None.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>The processed data retrieved from the last pipeline stage.</p>\n</blockquote>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>EmptyException</strong>:  If <code>block=True</code> and timeout is exceeded, or if <code>block=False</code> and no output is available in the output queue.</li>\n<li><strong>RuntimeError</strong>:  If called on an Pipeline without PipelineStages (empty pipeline).</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">block</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>, </span><span class=\"param\"><span class=\"n\">timeout</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "safethread.utils.Pipeline.Pipeline.put", "modulename": "safethread.utils.Pipeline", "qualname": "Pipeline.put", "kind": "function", "doc": "<p>Sends data into the first stage of the pipeline for processing.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>input</strong>:  The data to be processed by the pipeline.</li>\n<li><strong>block</strong>:  If True, waits until space is available in the input queue. Defaults to True.</li>\n<li><strong>timeout</strong>:  Maximum wait time for insertion. Defaults to None.</li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>FullException</strong>:  If <code>block=True</code> and timeout is exceeded, or if <code>block=False</code> and there is no available space in the input queue.</li>\n<li><strong>StoppedException</strong>:  If the pipeline has stopped.</li>\n<li><strong>RuntimeError</strong>:  If called on an empty Pipeline (one that has no PipelineStages)</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"nb\">input</span><span class=\"p\">:</span> <span class=\"n\">Any</span>, </span><span class=\"param\"><span class=\"n\">block</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>, </span><span class=\"param\"><span class=\"n\">timeout</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "safethread.utils.Pipeline.Pipeline.has_started", "modulename": "safethread.utils.Pipeline", "qualname": "Pipeline.has_started", "kind": "function", "doc": "<p>Checks if the pipeline has started.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>True if the pipeline has started, otherwise False.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "safethread.utils.Pipeline.Pipeline.is_alive", "modulename": "safethread.utils.Pipeline", "qualname": "Pipeline.is_alive", "kind": "function", "doc": "<p>Checks if all pipeline stages are alive.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>True if all pipeline stages are alive, otherwise False.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "safethread.utils.Pipeline.Pipeline.is_terminated", "modulename": "safethread.utils.Pipeline", "qualname": "Pipeline.is_terminated", "kind": "function", "doc": "<p>Checks if the pipeline has terminated.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>True if the pipeline HAS started and is NOT alive, otherwise False.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "safethread.utils.Pipeline.Pipeline.start", "modulename": "safethread.utils.Pipeline", "qualname": "Pipeline.start", "kind": "function", "doc": "<p>Starts all pipeline stages.</p>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>RuntimeError</strong>:  If start() is called more than once.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "safethread.utils.Pipeline.Pipeline.stop", "modulename": "safethread.utils.Pipeline", "qualname": "Pipeline.stop", "kind": "function", "doc": "<p>Stops all pipeline stages.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "safethread.utils.Pipeline.Pipeline.join", "modulename": "safethread.utils.Pipeline", "qualname": "Pipeline.join", "kind": "function", "doc": "<p>Waits for all pipeline stages to complete execution.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>timeout</strong>:  The maximum time to wait for each pipeline stage to finish. Defaults to None.</li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>RuntimeError</strong>:  If join() is called before start().</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">timeout</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "safethread.utils.Pipeline.Pipeline.stop_join", "modulename": "safethread.utils.Pipeline", "qualname": "Pipeline.stop_join", "kind": "function", "doc": "<p>Calls stop() and join() to stop the pipeline and wait for its stages to finish.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>timeout</strong>:  The maximum time to wait for stages to finish. Defaults to None.</li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>RuntimeError</strong>:  If join() is called before start() or an attempt is made to join the current thread.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">timeout</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "safethread.utils.PipelineStage", "modulename": "safethread.utils.PipelineStage", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "safethread.utils.PipelineStage.PipelineStage", "modulename": "safethread.utils.PipelineStage", "qualname": "PipelineStage", "kind": "class", "doc": "<p>A pipeline stage that processes data through a callback function.\nIt can run N separate threads to read and write data in parallel.</p>\n\n<p>This class allows data to be pushed to an input queue, where it is processed\nby the provided callback function, and the result is then placed in an output\nqueue. This can be useful for concurrent processing of tasks in a pipeline\nfashion.</p>\n\n<p>The pipeline runs indefinitely until <code>stop()()</code> is called.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>callback</strong>:  The function (or callable) that processes input data and \nproduces output. The callback should accept one argument \nand return the processed result.</li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>ThreadBase.CallableException</strong>:  If the provided callback is not callable.</li>\n<li><strong>ValueError</strong>:  If <code>n_threads</code> is less than 1.</li>\n</ul>\n\n<p><img src=\"../../../img/utils/PipelineStage.svg\" alt=\"\" width=\"100%\"></p>\n"}, {"fullname": "safethread.utils.PipelineStage.PipelineStage.__init__", "modulename": "safethread.utils.PipelineStage", "qualname": "PipelineStage.__init__", "kind": "function", "doc": "<p>Initializes the pipeline stage with a callback function.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>callback</strong>:  The function to process data through the pipeline stage.</li>\n<li><strong>n_threads</strong>:  Number of threads that will read the input queue, and \nstore result in the output queue. Defaults to 1.</li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>ThreadBase.CallableException</strong>:  If the callback argument is not callable.</li>\n<li><strong>ValueError</strong>:  If <code>n_threads</code> is less than 1.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">callback</span><span class=\"p\">:</span> <span class=\"n\">Callable</span>, </span><span class=\"param\"><span class=\"n\">n_threads</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">1</span></span>)</span>"}, {"fullname": "safethread.utils.PipelineStage.PipelineStage.EmptyException", "modulename": "safethread.utils.PipelineStage", "qualname": "PipelineStage.EmptyException", "kind": "variable", "doc": "<p>Raised when one of the following conditions happens:</p>\n\n<ul>\n<li>get(block=False) is called, and there is no input in IN_QUEUE</li>\n<li>get(timeout=value) and timeout exceeded (no input received within timeout time frame)</li>\n</ul>\n", "default_value": "&lt;class &#x27;_queue.Empty&#x27;&gt;"}, {"fullname": "safethread.utils.PipelineStage.PipelineStage.FullException", "modulename": "safethread.utils.PipelineStage", "qualname": "PipelineStage.FullException", "kind": "variable", "doc": "<p>Raised when one of the following conditions happens:</p>\n\n<ul>\n<li>put(block=False) is called and there is no available space in the OUT_QUEUE</li>\n<li>put(timeout=value) and timeout exceeded (OUT_QUEUE full and timeout has expired)</li>\n</ul>\n", "default_value": "&lt;class &#x27;queue.Full&#x27;&gt;"}, {"fullname": "safethread.utils.PipelineStage.PipelineStage.StoppedException", "modulename": "safethread.utils.PipelineStage", "qualname": "PipelineStage.StoppedException", "kind": "variable", "doc": "<p>Raised when put()/get() is called after Pipeline.stop()</p>\n", "default_value": "&lt;class &#x27;queue.ShutDown&#x27;&gt;"}, {"fullname": "safethread.utils.PipelineStage.PipelineStage.is_instance", "modulename": "safethread.utils.PipelineStage", "qualname": "PipelineStage.is_instance", "kind": "function", "doc": "<p>Checks if the object is an instance of PipelineStage.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>obj</strong>:  The object to check.</li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>TypeError</strong>:  If the object is not an instance of PipelineStage.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>The PipelineStage object if it is an instance.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">obj</span><span class=\"p\">:</span> <span class=\"n\">Any</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "safethread.utils.PipelineStage.PipelineStage.has_started", "modulename": "safethread.utils.PipelineStage", "qualname": "PipelineStage.has_started", "kind": "function", "doc": "<p>Checks if the pipeline stage has started.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>True if the pipeline stage has started, otherwise False.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "safethread.utils.PipelineStage.PipelineStage.is_alive", "modulename": "safethread.utils.PipelineStage", "qualname": "PipelineStage.is_alive", "kind": "function", "doc": "<p>Checks if the pipeline stage is alive.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>True if any thread of the pipeline stage is still alive, otherwise False.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "safethread.utils.PipelineStage.PipelineStage.is_terminated", "modulename": "safethread.utils.PipelineStage", "qualname": "PipelineStage.is_terminated", "kind": "function", "doc": "<p>Checks if the pipeline stage has terminated.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>True if the pipeline stage has started and is not alive, otherwise False.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "safethread.utils.PipelineStage.PipelineStage.put", "modulename": "safethread.utils.PipelineStage", "qualname": "PipelineStage.put", "kind": "function", "doc": "<p>Puts data into the input queue for processing.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>value</strong>:  The data to be processed by the pipeline.</li>\n<li><strong>block</strong>:  If True, block until data can be inserted into the queue. Defaults to True.</li>\n<li><strong>timeout</strong>:  Timeout for the put operation. Defaults to None.</li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>FullException</strong>:  If block is True and the timeout is exceeded, or if block is False and \nthere is no available space in the input queue.</li>\n<li><strong>StoppedException</strong>:  If the pipeline has stopped.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">value</span>, </span><span class=\"param\"><span class=\"n\">block</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>, </span><span class=\"param\"><span class=\"n\">timeout</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "safethread.utils.PipelineStage.PipelineStage.get", "modulename": "safethread.utils.PipelineStage", "qualname": "PipelineStage.get", "kind": "function", "doc": "<p>Retrieves the processed data from the output queue.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>block</strong>:  If True, block until data can be retrieved from the queue. Defaults to True.</li>\n<li><strong>timeout</strong>:  Timeout for the get operation. Defaults to None.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>The processed data after passing through the callback function.</p>\n</blockquote>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>EmptyException</strong>:  If block is True and the timeout is exceeded, or if block is False and \nno output is available in the output queue.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">block</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>, </span><span class=\"param\"><span class=\"n\">timeout</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "safethread.utils.PipelineStage.PipelineStage.connect_output", "modulename": "safethread.utils.PipelineStage", "qualname": "PipelineStage.connect_output", "kind": "function", "doc": "<p>Connects this Pipeline Stage output to the input of another pipeline.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>other_pipeline</strong>:  Another pipeline stage.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">other_pipeline</span><span class=\"p\">:</span> <span class=\"n\">Self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "safethread.utils.PipelineStage.PipelineStage.start", "modulename": "safethread.utils.PipelineStage", "qualname": "PipelineStage.start", "kind": "function", "doc": "<p>Starts the pipeline stage threads.</p>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>RuntimeError</strong>:  If start() is called more than once on the same thread object.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "safethread.utils.PipelineStage.PipelineStage.stop", "modulename": "safethread.utils.PipelineStage", "qualname": "PipelineStage.stop", "kind": "function", "doc": "<p>Stops the pipeline thread (immediately)</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "safethread.utils.PipelineStage.PipelineStage.join", "modulename": "safethread.utils.PipelineStage", "qualname": "PipelineStage.join", "kind": "function", "doc": "<p>Joins the pipeline stages' threads, waiting for them to finish.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>timeout</strong>:  The maximum time to wait for threads to finish. Defaults to None.</li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>RuntimeError</strong>:  If an attempt is made to join the current thread (main thread), \nor if join() is called before start().</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">timeout</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "safethread.utils.PipelineStage.PipelineStage.stop_join", "modulename": "safethread.utils.PipelineStage", "qualname": "PipelineStage.stop_join", "kind": "function", "doc": "<p>Calls stop() and join() to stop the pipeline stage and wait for its threads to finish.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>timeout</strong>:  The maximum time to wait for threads to finish. Defaults to None.</li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>RuntimeError</strong>:  If an attempt is made to join the current thread (main thread), \nor if join() is called before start().</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">timeout</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "safethread.utils.Publisher", "modulename": "safethread.utils.Publisher", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "safethread.utils.Publisher.Publisher", "modulename": "safethread.utils.Publisher", "qualname": "Publisher", "kind": "class", "doc": "<p>A thread-safe class that maintains a list of Subscriber instances and notifies them when data changes.</p>\n\n<p>This class allows subscribers to be added or removed from a list, and will notify them whenever\nnew data is published. It is designed to be thread-safe.</p>\n"}, {"fullname": "safethread.utils.Publisher.Publisher.__init__", "modulename": "safethread.utils.Publisher", "qualname": "Publisher.__init__", "kind": "function", "doc": "<p>Initializes a new Publisher instance.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "safethread.utils.Publisher.Publisher.subscribe", "modulename": "safethread.utils.Publisher", "qualname": "Publisher.subscribe", "kind": "function", "doc": "<p>Adds a subscriber(s) to receive notifications when new data is published.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>subscribers</strong>:  The subscriber(s) instance(s) to be added.</li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>TypeError</strong>:  If the subscribers is not an instance of the Subscriber\nclass or contains an Iterable[Subscriber].</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>current object</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">subscribers</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">safethread</span><span class=\"o\">.</span><span class=\"n\">utils</span><span class=\"o\">.</span><span class=\"n\">Subscriber</span><span class=\"o\">.</span><span class=\"n\">Subscriber</span><span class=\"p\">,</span> <span class=\"n\">Iterable</span><span class=\"p\">[</span><span class=\"n\">safethread</span><span class=\"o\">.</span><span class=\"n\">utils</span><span class=\"o\">.</span><span class=\"n\">Subscriber</span><span class=\"o\">.</span><span class=\"n\">Subscriber</span><span class=\"p\">]]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Self</span>:</span></span>", "funcdef": "def"}, {"fullname": "safethread.utils.Publisher.Publisher.unsubscribe", "modulename": "safethread.utils.Publisher", "qualname": "Publisher.unsubscribe", "kind": "function", "doc": "<p>Removes a subscriber from the list of subscribers, preventing further notifications.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>subscriber</strong>:  The subscriber instance to be removed.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>current object</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">subscriber</span><span class=\"p\">:</span> <span class=\"n\">safethread</span><span class=\"o\">.</span><span class=\"n\">utils</span><span class=\"o\">.</span><span class=\"n\">Subscriber</span><span class=\"o\">.</span><span class=\"n\">Subscriber</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "safethread.utils.Publisher.Publisher.publish", "modulename": "safethread.utils.Publisher", "qualname": "Publisher.publish", "kind": "function", "doc": "<p>Publishes new data and notifies all subscribed listeners.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>data</strong>:  The new data to be published to subscribers.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"n\">Any</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "safethread.utils.Singleton", "modulename": "safethread.utils.Singleton", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "safethread.utils.Singleton.Singleton", "modulename": "safethread.utils.Singleton", "qualname": "Singleton", "kind": "class", "doc": "<p>Singleton class that ensures only one instance of a subclass exists.</p>\n\n<p>This class provides a thread-safe mechanism to ensure that only a single instance\nof a subclass is created and shared across the application. The <code>getInstance</code> method\nis used to retrieve the single instance.</p>\n"}, {"fullname": "safethread.utils.Singleton.Singleton.getInstance", "modulename": "safethread.utils.Singleton", "qualname": "Singleton.getInstance", "kind": "function", "doc": "<p>Retrieves the single instance of the class, creating it if necessary.</p>\n\n<p>This method ensures that only one instance of the class is created. If an instance\nalready exists, it is returned; otherwise, a new instance is created and returned.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>*args</strong>:  Arguments to be passed to the class constructor.</li>\n<li><strong>**kwargs</strong>:  Keyword arguments to be passed to the class constructor.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>The single instance of the class.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">cls</span><span class=\"p\">:</span> <span class=\"n\">Type</span><span class=\"p\">[</span><span class=\"n\">Self</span><span class=\"p\">]</span>, </span><span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Self</span>:</span></span>", "funcdef": "def"}, {"fullname": "safethread.utils.SocketClient", "modulename": "safethread.utils.SocketClient", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "safethread.utils.SocketClient.SocketClient", "modulename": "safethread.utils.SocketClient", "qualname": "SocketClient", "kind": "class", "doc": "<p>A client class for communicating with a server that uses the SocketHandler class.</p>\n\n<p>This class allows clients to connect to the server, send messages, and receive responses\nasynchronously.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>host</strong>:  The host address of the server to connect to.</li>\n<li><strong>port</strong>:  The port number of the server to connect to.</li>\n<li><strong>protocol</strong>:  The transport protocol used by server/clients. Defaults to socket.SOCK_STREAM (TCP).</li>\n<li><strong>on_message_received</strong>:  A callback function that is called when a message is received from the server.\nThe function should accept one argument: the message.\nThe function can return a message to be sent to the client, if it returns a \nstring.</li>\n<li><strong>on_receive_error</strong>:  A callback function that is called when an error happens when the message is being received from the server.\nThe function should accept one argument: the Exception.                                </li>\n</ul>\n"}, {"fullname": "safethread.utils.SocketClient.SocketClient.__init__", "modulename": "safethread.utils.SocketClient", "qualname": "SocketClient.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">host</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">port</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">protocol</span><span class=\"p\">:</span> <span class=\"n\">socket</span><span class=\"o\">.</span><span class=\"n\">SocketKind</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">SocketKind</span><span class=\"o\">.</span><span class=\"n\">SOCK_STREAM</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">on_message_received</span><span class=\"p\">:</span> <span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"nb\">str</span><span class=\"p\">],</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"kc\">None</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">function</span> <span class=\"n\">SocketClient</span><span class=\"o\">.&lt;</span><span class=\"k\">lambda</span><span class=\"o\">&gt;&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">on_receive_error</span><span class=\"p\">:</span> <span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"ne\">Exception</span><span class=\"p\">],</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">function</span> <span class=\"n\">SocketClient</span><span class=\"o\">.&lt;</span><span class=\"k\">lambda</span><span class=\"o\">&gt;&gt;</span></span>)</span>"}, {"fullname": "safethread.utils.SocketClient.SocketClient.connect", "modulename": "safethread.utils.SocketClient", "qualname": "SocketClient.connect", "kind": "function", "doc": "<p>Connects to the server.</p>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>RuntimeError</strong>:  If the client is already connected.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "safethread.utils.SocketClient.SocketClient.disconnect", "modulename": "safethread.utils.SocketClient", "qualname": "SocketClient.disconnect", "kind": "function", "doc": "<p>Disconnects from the server and stops the receive thread.</p>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>RuntimeError</strong>:  If the client is not connected.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "safethread.utils.SocketClient.SocketClient.send_message", "modulename": "safethread.utils.SocketClient", "qualname": "SocketClient.send_message", "kind": "function", "doc": "<p>Sends a message to the server.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>message</strong>:  The message to send.</li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>RuntimeError</strong>:  If the client is not connected to the server.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">message</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "safethread.utils.SocketClient.SocketClient.get_status", "modulename": "safethread.utils.SocketClient", "qualname": "SocketClient.get_status", "kind": "function", "doc": "<p>Retrieves the current status of connection.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>A tuple containing a status code (0 for success, 1 for error) and an error message if any.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "safethread.utils.SocketClient.SocketClient.is_connected", "modulename": "safethread.utils.SocketClient", "qualname": "SocketClient.is_connected", "kind": "function", "doc": "<p>Checks if the client is connected to the server.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>True if connected, False otherwise.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "safethread.utils.SocketServer", "modulename": "safethread.utils.SocketServer", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "safethread.utils.SocketServer.SocketServer", "modulename": "safethread.utils.SocketServer", "qualname": "SocketServer", "kind": "class", "doc": "<p>A thread-safe asynchronous socket handler that manages server and client sockets.</p>\n\n<p>This class allows for asynchronous communication between a server and multiple clients.\nEach client connection is handled in a separate thread, and the server can send and\nreceive messages asynchronously.</p>\n"}, {"fullname": "safethread.utils.SocketServer.SocketServer.__init__", "modulename": "safethread.utils.SocketServer", "qualname": "SocketServer.__init__", "kind": "function", "doc": "<p>Initializes SocketHandler instance.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>host</strong>:  The host address to bind the server socket to.</li>\n<li><strong>port</strong>:  The port number to bind the server socket to.</li>\n<li><strong>max_clients</strong>:  The maximum number of clients that can connect to the server. Defaults to 5.</li>\n<li><strong>protocol</strong>:  The transport protocol used by server/clients. Defaults to socket.SOCK_STREAM (TCP).</li>\n<li><strong>on_message_received</strong>:  A callback function that is called when a message is received from a client.\nThe function should accept 3 arguments: the client socket, address tuple (IP, port), and the message.\nThe function can return a message to be sent to the client, if it returns a\nstring.</li>\n<li><strong>on_receive_error</strong>:  A callback function that is called when an error happens when acceppting new clients,\nin the server socket.\nThe function should accept one argument: the Exception.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">host</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">port</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">max_clients</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">5</span>,</span><span class=\"param\">\t<span class=\"n\">protocol</span><span class=\"p\">:</span> <span class=\"n\">socket</span><span class=\"o\">.</span><span class=\"n\">SocketKind</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">SocketKind</span><span class=\"o\">.</span><span class=\"n\">SOCK_STREAM</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">on_message_received</span><span class=\"p\">:</span> <span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"n\">socket</span><span class=\"o\">.</span><span class=\"n\">socket</span><span class=\"p\">,</span> <span class=\"nb\">tuple</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">],</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"kc\">None</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">function</span> <span class=\"n\">SocketServer</span><span class=\"o\">.&lt;</span><span class=\"k\">lambda</span><span class=\"o\">&gt;&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">on_server_error</span><span class=\"p\">:</span> <span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"ne\">Exception</span><span class=\"p\">],</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">function</span> <span class=\"n\">SocketServer</span><span class=\"o\">.&lt;</span><span class=\"k\">lambda</span><span class=\"o\">&gt;&gt;</span></span>)</span>"}, {"fullname": "safethread.utils.SocketServer.SocketServer.is_running", "modulename": "safethread.utils.SocketServer", "qualname": "SocketServer.is_running", "kind": "function", "doc": "<p>Checks if the server is running.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>True if running, False otherwise.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "safethread.utils.SocketServer.SocketServer.get_status", "modulename": "safethread.utils.SocketServer", "qualname": "SocketServer.get_status", "kind": "function", "doc": "<p>Retrieves the current status of the server.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>A tuple containing a status code (0 for success, 1 for error) and an error message if any.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "safethread.utils.SocketServer.SocketServer.start_server", "modulename": "safethread.utils.SocketServer", "qualname": "SocketServer.start_server", "kind": "function", "doc": "<p>Starts the server thread to accept incoming client connections.</p>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>RuntimeError</strong>:  If the server thread is already running.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "safethread.utils.SocketServer.SocketServer.stop_server", "modulename": "safethread.utils.SocketServer", "qualname": "SocketServer.stop_server", "kind": "function", "doc": "<p>Stops the server thread and closes all client connections.</p>\n\n<p>This method stops the server thread and closes all active client sockets.</p>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>RuntimeError</strong>:  If the server thread is already stopping or stopped.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "safethread.utils.SocketServer.SocketServer.send_message", "modulename": "safethread.utils.SocketServer", "qualname": "SocketServer.send_message", "kind": "function", "doc": "<p>Sends a message to a specific client.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>client_socket</strong>:  The socket object representing the client to send the message to.</li>\n<li><strong>message</strong>:  The message to send.</li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>RuntimeError</strong>:  If the client socket is not connected.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">client_socket</span><span class=\"p\">:</span> <span class=\"n\">socket</span><span class=\"o\">.</span><span class=\"n\">socket</span>, </span><span class=\"param\"><span class=\"n\">message</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "safethread.utils.SocketServer.SocketServer.broadcast_message", "modulename": "safethread.utils.SocketServer", "qualname": "SocketServer.broadcast_message", "kind": "function", "doc": "<p>Sends a message to all connected clients.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>message</strong>:  The message to broadcast.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">message</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "safethread.utils.Subscriber", "modulename": "safethread.utils.Subscriber", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "safethread.utils.Subscriber.Subscriber", "modulename": "safethread.utils.Subscriber", "qualname": "Subscriber", "kind": "class", "doc": "<p>A class that subscribes to a Publisher and receives notifications when data changes.</p>\n\n<p>This class allows a subscriber to register a callback function that is called whenever\nnew data is published by a Publisher.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>callback</strong>:  A function that will be called whenever new data is published.</li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>TypeError</strong>:  If the <code>callback</code> argument is not a callable function or object.</li>\n</ul>\n"}, {"fullname": "safethread.utils.Subscriber.Subscriber.__init__", "modulename": "safethread.utils.Subscriber", "qualname": "Subscriber.__init__", "kind": "function", "doc": "<p>Initializes the Subscriber with the provided callback function.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>callback</strong>:  The function to be called when new data is published.</li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>TypeError</strong>:  If <code>callback</code> is not callable.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">callback</span><span class=\"p\">:</span> <span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"n\">Any</span><span class=\"p\">],</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span></span>)</span>"}, {"fullname": "safethread.utils.utils", "modulename": "safethread.utils.utils", "kind": "module", "doc": "<p>Utility functions for the library</p>\n"}, {"fullname": "safethread.utils.utils.try_except_finally_wrap", "modulename": "safethread.utils.utils", "qualname": "try_except_finally_wrap", "kind": "function", "doc": "<p>Wraps a given callback function in a try-except-finally block.</p>\n\n<p>This utility function allows for the execution of a callback function with error\nhandling and final actions. If an exception occurs during the execution of the \n<code>callback</code>, the <code>callback_fail</code> function is called. If no exception occurs, the\n<code>callback_succ</code> function is called. Regardless of success or failure, \nthe <code>callback_final</code> function will always be executed in the finally block.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><p><strong>callback</strong>:  The function to be executed within the try block.</p></li>\n<li><p><strong>callback_succ</strong>:  The function to be executed if mo exception is raised.</p></li>\n<li><p><strong>callback_fail</strong>:  The function to be executed if an exception is raised.</p></li>\n<li><p><strong>callback_final</strong>:  The function to be executed in the finally block, regardless of success or failure.</p></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">callback</span><span class=\"p\">:</span> <span class=\"n\">Callable</span>,</span><span class=\"param\">\t<span class=\"n\">callback_succ</span><span class=\"p\">:</span> <span class=\"n\">Callable</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">function</span> <span class=\"o\">&lt;</span><span class=\"k\">lambda</span><span class=\"o\">&gt;&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">callback_fail</span><span class=\"p\">:</span> <span class=\"n\">Callable</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">function</span> <span class=\"o\">&lt;</span><span class=\"k\">lambda</span><span class=\"o\">&gt;&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">callback_final</span><span class=\"p\">:</span> <span class=\"n\">Callable</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">function</span> <span class=\"o\">&lt;</span><span class=\"k\">lambda</span><span class=\"o\">&gt;&gt;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}];

    // mirrored in build-search-index.js (part 1)
    // Also split on html tags. this is a cheap heuristic, but good enough.
    elasticlunr.tokenizer.setSeperator(/[\s\-.;&_'"=,()]+|<[^>]*>/);

    let searchIndex;
    if (docs._isPrebuiltIndex) {
        console.info("using precompiled search index");
        searchIndex = elasticlunr.Index.load(docs);
    } else {
        console.time("building search index");
        // mirrored in build-search-index.js (part 2)
        searchIndex = elasticlunr(function () {
            this.pipeline.remove(elasticlunr.stemmer);
            this.pipeline.remove(elasticlunr.stopWordFilter);
            this.addField("qualname");
            this.addField("fullname");
            this.addField("annotation");
            this.addField("default_value");
            this.addField("signature");
            this.addField("bases");
            this.addField("doc");
            this.setRef("fullname");
        });
        for (let doc of docs) {
            searchIndex.addDoc(doc);
        }
        console.timeEnd("building search index");
    }

    return (term) => searchIndex.search(term, {
        fields: {
            qualname: {boost: 4},
            fullname: {boost: 2},
            annotation: {boost: 2},
            default_value: {boost: 2},
            signature: {boost: 2},
            bases: {boost: 2},
            doc: {boost: 1},
        },
        expand: true
    });
})();